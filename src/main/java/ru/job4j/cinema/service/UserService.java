package ru.job4j.cinema.service;

import ru.job4j.cinema.model.User;

import java.util.List;
import java.util.NoSuchElementException;

/**
 * Сервис пользователей, логика работы с пользователями
 * @see ru.job4j.cinema.model.User
 * @author Alexander Emelyanov
 * @version 1.0
 */
public interface UserService {

    /**
     * Возвращает список всех пользователей
     *
     * @return {@code List<User>} - список всех пользователей
     */
    List<User> findAll();

    /**
     * Выполняет поиск пользователя по идентификатору. При успешном нахождении возвращает
     * пользователя, иначе выбрасывает исключение.
     *
     * @param id идентификатор пользователя
     * @return пользователя при успешном нахождении
     */
    User findById(int id);

    /**
     * Выполняет сохранение пользователя. При успешном сохранении возвращает
     * пользователя, иначе выбрасывается исключение.
     *
     * @param user сохраняемый пользователь
     * @return пользователя при успешном сохранении
     */
    User save(User user);

    /**
     * Выполняет обновление пользователя.
     *
     * @param user обновляемый пользователь
     * @return true при успешном обновлении пользователя
     */
    boolean update(User user);

    /**
     * Выполняет удаление пользователя по идентификатору. При успешном удалении
     * пользователя возвращает true, иначе выбрасывается исключение.
     *
     * @param id идентификатор пользователя
     * @return true при успешном удалении
     */
    boolean deleteById(int id);

    /**
     * Выполняет поиск пользователя по почтовому адресу. При успешном нахождении возвращает
     * сохраненного пользователя, иначе выбрасывает исключение.
     *
     * @param email почтовый адрес пользователя
     * @return пользователя при успешном нахождении
     */
    User findUserByEmail(String email);

    /**
     * Выполняет сверку данных пользователя с входной формы с данными пользователя в базе по
     * почтовому адресу и паролю. При успешной проверке возвращает пользователя извлеченного
     * из базы данных, иначе выбрасывает исключение.
     *
     * @param user пользователя
     * @return пользователя при успешном при совпадении пароля и почтового адреса
     */
    User validateUserLogin(User user);

    /**
     * Выполняет поиск пользователя по номеру телефона. При успешном нахождении возвращает
     * пользователя, иначе выбрасывает исключение.
     *
     * @param phone номер телефона пользователя
     * @return пользователя при успешном нахождении
     */
    User findUserByPhone(String phone);
}
